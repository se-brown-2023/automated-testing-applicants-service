openapi: 3.0.3
info:
  title: Exam conduct service API
  version: 1.0.0
security:
  - bearerAuth: [ ]
paths:
  /api/exam-session/{examSessionId}:
    get:
      tags:
        - ExamSession
      summary: Get an exam session
      parameters:
        - in: path
          required: true
          name: examSessionId
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Exam session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExamSessionComponent"
        '404':
          description: Exam session not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDto"
              example: { "status": "Not found", "message": "Exam session was not found" }
  /api/exam-session/{examSessionId}/start:
    get:
      tags:
        - ExamSession
      summary: Start an exam session
      parameters:
        - in: path
          required: true
          name: examSessionId
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Exam session has been started
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExamSessionComponent"
        '400':
          description: ExamSessionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDto"
              example: { "status": "Bad Request", "message": "Exam can not be started" }
  /api/exam-session/{examSessionId}/finish:
    get:
      tags:
        - ExamSession
      summary: Finish an exam session
      parameters:
        - in: path
          required: true
          name: examSessionId
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Exam session has been finished
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FinishExamSessionResponse"
        '400':
          description: ExamSessionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDto"
              example: { "status": "Bad Request", "message": "Exam session can not be finished" }
  /api/exam-session/{examSessionId}/sendSolution:
    put:
      tags:
        - ExamSession
      summary: Send task solution
      parameters:
        - in: path
          required: true
          name: examSessionId
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendTaskSolutionRequest"
      responses:
        '200':
          description: Solution has been sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendTaskSolutionResponse"
        '400':
          description: ExamSessionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDto"
              example: { "status": "Bad Request", "message": "Solution can not be send" }
  /api/exam-session/{examSessionId}/time:
    get:
      tags:
        - ExamSession
      summary: Get exam time
      parameters:
        - in: path
          required: true
          name: examSessionId
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Exam session time successfully get
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetExamSessionTimeResponse"
        '400':
          description: ExamSessionException
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorDto"
              example: { "status": "Bad Request", "message": "Exam can not be started. No any time available." }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    SendTaskSolutionResponse:
      type: string
    ExamSessionComponent:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
        exam:
          $ref: "#/components/schemas/Exam"
        examine:
          $ref: "#/components/schemas/Examine"
        startTimestamp:
          type: string
          format: date-time
        finishTimestamp:
          type: string
          format: date-time
      required:
        - id
        - status
        - exam
        - examine
        - startTimestamp
        - finishTimestamp
    FinishExamSessionResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
      required:
        - id
        - status
    GetExamSessionTimeResponse:
      type: integer
      format: int64
    SendTaskSolutionRequest:
      type: object
      properties:
        submission:
          $ref: "#/components/schemas/Submission"
      required:
        - submission
    Exam:
      type: object
      properties:
        id:
          type: integer
          format: int64
        examinerId:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        programmingLanguage:
          type: string
        maxDuration:
          type: string
        ttl:
          type: string
        creationDate:
          type: string
          format: date-time
        tasks:
          $ref: "#/components/schemas/Tasks"
    Examine:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
    Tasks:
      type: array
      items:
          $ref: "#/components/schemas/Task"
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        authorSourceCode:
          type: string
    Submission:
      type: object
      properties:
        taskId:
          type: integer
          format: int64
        userSourceCode:
          type: string
    ApiErrorDto:
      type: object
      properties:
        status:
          type: string
        message:
          type: string
      required:
        - status
        - message

