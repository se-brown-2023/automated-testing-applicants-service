/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.sebrown2023.controller;

import com.sebrown2023.exceptions.ExamSessionException;
import com.sebrown2023.model.dto.FinishExamSessionResponse;
import com.sebrown2023.model.dto.SendTaskSolutionRequest;
import com.sebrown2023.model.dto.StartExamSessionResponse;
import java.util.UUID;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;

import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
public interface ExamSessionApi {

    /**
     * GET /api/exam-session/{examSessionId}/finish : Finish an exam session
     *
     * @param examSessionId  (required)
     * @return Exam session has been finished (status code 200)
     *         or ExamSessionException (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/exam-session/{examSessionId}/finish",
        produces = { "application/json" }
    )
    
    ResponseEntity<FinishExamSessionResponse> apiExamSessionExamSessionIdFinishGet(
         @PathVariable("examSessionId") UUID examSessionId
    ) throws ExamSessionException;


    /**
     * PUT /api/exam-session/{examSessionId}/sendSolution : Send task solution
     *
     * @param examSessionId  (required)
     * @param sendTaskSolutionRequest  (required)
     * @return Solution has been sent successfully (status code 200)
     *         or ExamSessionException (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/exam-session/{examSessionId}/sendSolution",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<String> apiExamSessionExamSessionIdSendSolutionPut(
         @PathVariable("examSessionId") UUID examSessionId,
         @Valid @RequestBody SendTaskSolutionRequest sendTaskSolutionRequest
    ) throws ExamSessionException;


    /**
     * GET /api/exam-session/{examSessionId}/start : Start an exam session
     *
     * @param examSessionId  (required)
     * @return Exam session has been started (status code 200)
     *         or ExamSessionException (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/exam-session/{examSessionId}/start",
        produces = { "application/json" }
    )
    
    ResponseEntity<StartExamSessionResponse> apiExamSessionExamSessionIdStartGet(
         @PathVariable("examSessionId") UUID examSessionId
    ) throws ExamSessionException;

}
