/* tslint:disable */
/* eslint-disable */
/**
 * Exam conduct service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiErrorDto
 */
export interface ApiErrorDto {
    /**
     * 
     * @type {string}
     * @memberof ApiErrorDto
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof ApiErrorDto
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface Exam
 */
export interface Exam {
    /**
     * 
     * @type {number}
     * @memberof Exam
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof Exam
     */
    'examinerId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'programmingLanguage'?: string;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'maxDuration'?: string;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'ttl'?: string;
    /**
     * 
     * @type {string}
     * @memberof Exam
     */
    'creationDate'?: string;
    /**
     * 
     * @type {Array<Task>}
     * @memberof Exam
     */
    'tasks'?: Array<Task>;
}
/**
 * 
 * @export
 * @interface ExamSessionComponent
 */
export interface ExamSessionComponent {
    /**
     * 
     * @type {string}
     * @memberof ExamSessionComponent
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ExamSessionComponent
     */
    'status': string;
    /**
     * 
     * @type {Exam}
     * @memberof ExamSessionComponent
     */
    'exam': Exam;
    /**
     * 
     * @type {Examine}
     * @memberof ExamSessionComponent
     */
    'examine': Examine;
    /**
     * 
     * @type {string}
     * @memberof ExamSessionComponent
     */
    'startTimestamp': string;
    /**
     * 
     * @type {string}
     * @memberof ExamSessionComponent
     */
    'finishTimestamp': string;
}
/**
 * 
 * @export
 * @interface Examine
 */
export interface Examine {
    /**
     * 
     * @type {number}
     * @memberof Examine
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Examine
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Examine
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof Examine
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof Examine
     */
    'phoneNumber'?: string;
}
/**
 * 
 * @export
 * @interface FinishExamSessionResponse
 */
export interface FinishExamSessionResponse {
    /**
     * 
     * @type {string}
     * @memberof FinishExamSessionResponse
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FinishExamSessionResponse
     */
    'status': string;
}
/**
 * 
 * @export
 * @interface SendTaskSolutionRequest
 */
export interface SendTaskSolutionRequest {
    /**
     * 
     * @type {Submission}
     * @memberof SendTaskSolutionRequest
     */
    'submission': Submission;
}
/**
 * 
 * @export
 * @interface Submission
 */
export interface Submission {
    /**
     * 
     * @type {number}
     * @memberof Submission
     */
    'taskId'?: number;
    /**
     * 
     * @type {string}
     * @memberof Submission
     */
    'userSourceCode'?: string;
}
/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'authorSourceCode'?: string;
}

/**
 * ExamSessionApi - axios parameter creator
 * @export
 */
export const ExamSessionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Finish an exam session
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExamSessionExamSessionIdFinishGet: async (examSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examSessionId' is not null or undefined
            assertParamExists('apiExamSessionExamSessionIdFinishGet', 'examSessionId', examSessionId)
            const localVarPath = `/api/exam-session/{examSessionId}/finish`
                .replace(`{${"examSessionId"}}`, encodeURIComponent(String(examSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an exam session
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExamSessionExamSessionIdGet: async (examSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examSessionId' is not null or undefined
            assertParamExists('apiExamSessionExamSessionIdGet', 'examSessionId', examSessionId)
            const localVarPath = `/api/exam-session/{examSessionId}`
                .replace(`{${"examSessionId"}}`, encodeURIComponent(String(examSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send task solution
         * @param {string} examSessionId 
         * @param {SendTaskSolutionRequest} sendTaskSolutionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExamSessionExamSessionIdSendSolutionPut: async (examSessionId: string, sendTaskSolutionRequest: SendTaskSolutionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examSessionId' is not null or undefined
            assertParamExists('apiExamSessionExamSessionIdSendSolutionPut', 'examSessionId', examSessionId)
            // verify required parameter 'sendTaskSolutionRequest' is not null or undefined
            assertParamExists('apiExamSessionExamSessionIdSendSolutionPut', 'sendTaskSolutionRequest', sendTaskSolutionRequest)
            const localVarPath = `/api/exam-session/{examSessionId}/sendSolution`
                .replace(`{${"examSessionId"}}`, encodeURIComponent(String(examSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendTaskSolutionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start an exam session
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExamSessionExamSessionIdStartGet: async (examSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examSessionId' is not null or undefined
            assertParamExists('apiExamSessionExamSessionIdStartGet', 'examSessionId', examSessionId)
            const localVarPath = `/api/exam-session/{examSessionId}/start`
                .replace(`{${"examSessionId"}}`, encodeURIComponent(String(examSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get exam time
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExamSessionExamSessionIdTimeGet: async (examSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examSessionId' is not null or undefined
            assertParamExists('apiExamSessionExamSessionIdTimeGet', 'examSessionId', examSessionId)
            const localVarPath = `/api/exam-session/{examSessionId}/time`
                .replace(`{${"examSessionId"}}`, encodeURIComponent(String(examSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExamSessionApi - functional programming interface
 * @export
 */
export const ExamSessionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExamSessionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Finish an exam session
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExamSessionExamSessionIdFinishGet(examSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinishExamSessionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiExamSessionExamSessionIdFinishGet(examSessionId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamSessionApi.apiExamSessionExamSessionIdFinishGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get an exam session
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExamSessionExamSessionIdGet(examSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExamSessionComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiExamSessionExamSessionIdGet(examSessionId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamSessionApi.apiExamSessionExamSessionIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Send task solution
         * @param {string} examSessionId 
         * @param {SendTaskSolutionRequest} sendTaskSolutionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExamSessionExamSessionIdSendSolutionPut(examSessionId: string, sendTaskSolutionRequest: SendTaskSolutionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiExamSessionExamSessionIdSendSolutionPut(examSessionId, sendTaskSolutionRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamSessionApi.apiExamSessionExamSessionIdSendSolutionPut']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Start an exam session
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExamSessionExamSessionIdStartGet(examSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExamSessionComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiExamSessionExamSessionIdStartGet(examSessionId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamSessionApi.apiExamSessionExamSessionIdStartGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get exam time
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiExamSessionExamSessionIdTimeGet(examSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiExamSessionExamSessionIdTimeGet(examSessionId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamSessionApi.apiExamSessionExamSessionIdTimeGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ExamSessionApi - factory interface
 * @export
 */
export const ExamSessionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExamSessionApiFp(configuration)
    return {
        /**
         * 
         * @summary Finish an exam session
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExamSessionExamSessionIdFinishGet(examSessionId: string, options?: any): AxiosPromise<FinishExamSessionResponse> {
            return localVarFp.apiExamSessionExamSessionIdFinishGet(examSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an exam session
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExamSessionExamSessionIdGet(examSessionId: string, options?: any): AxiosPromise<ExamSessionComponent> {
            return localVarFp.apiExamSessionExamSessionIdGet(examSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send task solution
         * @param {string} examSessionId 
         * @param {SendTaskSolutionRequest} sendTaskSolutionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExamSessionExamSessionIdSendSolutionPut(examSessionId: string, sendTaskSolutionRequest: SendTaskSolutionRequest, options?: any): AxiosPromise<string> {
            return localVarFp.apiExamSessionExamSessionIdSendSolutionPut(examSessionId, sendTaskSolutionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Start an exam session
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExamSessionExamSessionIdStartGet(examSessionId: string, options?: any): AxiosPromise<ExamSessionComponent> {
            return localVarFp.apiExamSessionExamSessionIdStartGet(examSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get exam time
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiExamSessionExamSessionIdTimeGet(examSessionId: string, options?: any): AxiosPromise<number> {
            return localVarFp.apiExamSessionExamSessionIdTimeGet(examSessionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExamSessionApi - object-oriented interface
 * @export
 * @class ExamSessionApi
 * @extends {BaseAPI}
 */
export class ExamSessionApi extends BaseAPI {
    /**
     * 
     * @summary Finish an exam session
     * @param {string} examSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamSessionApi
     */
    public apiExamSessionExamSessionIdFinishGet(examSessionId: string, options?: RawAxiosRequestConfig) {
        return ExamSessionApiFp(this.configuration).apiExamSessionExamSessionIdFinishGet(examSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get an exam session
     * @param {string} examSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamSessionApi
     */
    public apiExamSessionExamSessionIdGet(examSessionId: string, options?: RawAxiosRequestConfig) {
        return ExamSessionApiFp(this.configuration).apiExamSessionExamSessionIdGet(examSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send task solution
     * @param {string} examSessionId 
     * @param {SendTaskSolutionRequest} sendTaskSolutionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamSessionApi
     */
    public apiExamSessionExamSessionIdSendSolutionPut(examSessionId: string, sendTaskSolutionRequest: SendTaskSolutionRequest, options?: RawAxiosRequestConfig) {
        return ExamSessionApiFp(this.configuration).apiExamSessionExamSessionIdSendSolutionPut(examSessionId, sendTaskSolutionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Start an exam session
     * @param {string} examSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamSessionApi
     */
    public apiExamSessionExamSessionIdStartGet(examSessionId: string, options?: RawAxiosRequestConfig) {
        return ExamSessionApiFp(this.configuration).apiExamSessionExamSessionIdStartGet(examSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get exam time
     * @param {string} examSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamSessionApi
     */
    public apiExamSessionExamSessionIdTimeGet(examSessionId: string, options?: RawAxiosRequestConfig) {
        return ExamSessionApiFp(this.configuration).apiExamSessionExamSessionIdTimeGet(examSessionId, options).then((request) => request(this.axios, this.basePath));
    }
}



