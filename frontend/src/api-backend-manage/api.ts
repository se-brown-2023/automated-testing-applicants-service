/* tslint:disable */
/* eslint-disable */
/**
 * Exam manager - OpenAPI 3.0
 * API for exam-manager-service.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ApiError
 */
export interface ApiError {
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof ApiError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface ExamComponent
 */
export interface ExamComponent {
    /**
     * 
     * @type {number}
     * @memberof ExamComponent
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExamComponent
     */
    'examiner_id': number;
    /**
     * 
     * @type {string}
     * @memberof ExamComponent
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ExamComponent
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExamComponent
     */
    'programming_language': ExamComponentProgrammingLanguageEnum;
    /**
     * 
     * @type {number}
     * @memberof ExamComponent
     */
    'max_duration'?: number;
    /**
     * 
     * @type {number}
     * @memberof ExamComponent
     */
    'TTL'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExamComponent
     */
    'creation_date'?: string;
    /**
     * 
     * @type {Array<TaskComponent>}
     * @memberof ExamComponent
     */
    'tasks'?: Array<TaskComponent>;
}

export const ExamComponentProgrammingLanguageEnum = {
    Java: 'JAVA',
    JavaScript: 'JAVA_SCRIPT'
} as const;

export type ExamComponentProgrammingLanguageEnum = typeof ExamComponentProgrammingLanguageEnum[keyof typeof ExamComponentProgrammingLanguageEnum];

/**
 * 
 * @export
 * @interface ExamSessionComponent
 */
export interface ExamSessionComponent {
    /**
     * 
     * @type {string}
     * @memberof ExamSessionComponent
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof ExamSessionComponent
     */
    'exam_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExamSessionComponent
     */
    'status'?: ExamSessionComponentStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ExamSessionComponent
     */
    'start_time_stamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExamSessionComponent
     */
    'finish_time_stamp'?: string;
    /**
     * 
     * @type {ExamineeComponent}
     * @memberof ExamSessionComponent
     */
    'examinee'?: ExamineeComponent;
}

export const ExamSessionComponentStatusEnum = {
    Created: 'CREATED',
    Started: 'STARTED',
    Finished: 'FINISHED',
    Expired: 'EXPIRED'
} as const;

export type ExamSessionComponentStatusEnum = typeof ExamSessionComponentStatusEnum[keyof typeof ExamSessionComponentStatusEnum];

/**
 * 
 * @export
 * @interface ExamineeComponent
 */
export interface ExamineeComponent {
    /**
     * 
     * @type {number}
     * @memberof ExamineeComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ExamineeComponent
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExamineeComponent
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExamineeComponent
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ExamineeComponent
     */
    'phone_number'?: string;
}
/**
 * 
 * @export
 * @interface SubmissionComponent
 */
export interface SubmissionComponent {
    /**
     * 
     * @type {number}
     * @memberof SubmissionComponent
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof SubmissionComponent
     */
    'task_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SubmissionComponent
     */
    'exam_session_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubmissionComponent
     */
    'user_source_code'?: string;
    /**
     * 
     * @type {string}
     * @memberof SubmissionComponent
     */
    'submit_time'?: string;
    /**
     * 
     * @type {Array<TestResultComponent>}
     * @memberof SubmissionComponent
     */
    'testResults'?: Array<TestResultComponent>;
}
/**
 * 
 * @export
 * @interface TaskComponent
 */
export interface TaskComponent {
    /**
     * 
     * @type {number}
     * @memberof TaskComponent
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TaskComponent
     */
    'exam_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskComponent
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TaskComponent
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskComponent
     */
    'author_source_code'?: string;
    /**
     * 
     * @type {Array<TestComponent>}
     * @memberof TaskComponent
     */
    'tests'?: Array<TestComponent>;
}
/**
 * 
 * @export
 * @interface TestComponent
 */
export interface TestComponent {
    /**
     * 
     * @type {number}
     * @memberof TestComponent
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TestComponent
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof TestComponent
     */
    'task_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TestComponent
     */
    'input_data': string;
    /**
     * 
     * @type {string}
     * @memberof TestComponent
     */
    'output_data': string;
}
/**
 * 
 * @export
 * @interface TestResultComponent
 */
export interface TestResultComponent {
    /**
     * 
     * @type {number}
     * @memberof TestResultComponent
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TestResultComponent
     */
    'submission_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof TestResultComponent
     */
    'test_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TestResultComponent
     */
    'actual_output_data'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TestResultComponent
     */
    'passed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof TestResultComponent
     */
    'elapsed_time'?: number;
}

/**
 * ExamApi - axios parameter creator
 * @export
 */
export const ExamApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint for adding tasks to exam. Requires a JSON payload with tasks ids in the request body.
         * @summary Adding tasks to exam
         * @param {number} examId 
         * @param {Array<number>} requestBody JSON payload containing tasks ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTasksToExam: async (examId: number, requestBody: Array<number>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examId' is not null or undefined
            assertParamExists('addTasksToExam', 'examId', examId)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addTasksToExam', 'requestBody', requestBody)
            const localVarPath = `/api/exam/{exam_id}/add_tasks`
                .replace(`{${"exam_id"}}`, encodeURIComponent(String(examId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for creating a new exam. Requires a JSON payload with exam details in the request body.
         * @summary Creating a new exam
         * @param {ExamComponent} examComponent JSON payload containing Exam its tasks(optional) and their tests(optional).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExam: async (examComponent: ExamComponent, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examComponent' is not null or undefined
            assertParamExists('createExam', 'examComponent', examComponent)
            const localVarPath = `/api/exam`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(examComponent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for exam deleting.
         * @summary Delete an exam
         * @param {number} examId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExam: async (examId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examId' is not null or undefined
            assertParamExists('deleteExam', 'examId', examId)
            const localVarPath = `/api/exam/{exam_id}`
                .replace(`{${"exam_id"}}`, encodeURIComponent(String(examId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for getting all exams with theirs tasks and tests.
         * @summary Get all exams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExams: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/exam`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for getting exam with theirs tasks and tests by id.
         * @summary Get an exam by id
         * @param {number} examId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExam: async (examId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examId' is not null or undefined
            assertParamExists('getExam', 'examId', examId)
            const localVarPath = `/api/exam/{exam_id}`
                .replace(`{${"exam_id"}}`, encodeURIComponent(String(examId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for getting exams with theirs tasks and tests by examiner id.
         * @summary Get exams by examiner id
         * @param {number} examinerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExamsForExaminer: async (examinerId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examinerId' is not null or undefined
            assertParamExists('getExamsForExaminer', 'examinerId', examinerId)
            const localVarPath = `/api/exam/examinee/{examiner_id}`
                .replace(`{${"examiner_id"}}`, encodeURIComponent(String(examinerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExamApi - functional programming interface
 * @export
 */
export const ExamApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExamApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint for adding tasks to exam. Requires a JSON payload with tasks ids in the request body.
         * @summary Adding tasks to exam
         * @param {number} examId 
         * @param {Array<number>} requestBody JSON payload containing tasks ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTasksToExam(examId: number, requestBody: Array<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExamComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTasksToExam(examId, requestBody, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamApi.addTasksToExam']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for creating a new exam. Requires a JSON payload with exam details in the request body.
         * @summary Creating a new exam
         * @param {ExamComponent} examComponent JSON payload containing Exam its tasks(optional) and their tests(optional).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExam(examComponent: ExamComponent, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExamComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExam(examComponent, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamApi.createExam']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for exam deleting.
         * @summary Delete an exam
         * @param {number} examId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExam(examId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExam(examId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamApi.deleteExam']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for getting all exams with theirs tasks and tests.
         * @summary Get all exams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllExams(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExamComponent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllExams(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamApi.getAllExams']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for getting exam with theirs tasks and tests by id.
         * @summary Get an exam by id
         * @param {number} examId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExam(examId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExamComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExam(examId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamApi.getExam']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for getting exams with theirs tasks and tests by examiner id.
         * @summary Get exams by examiner id
         * @param {number} examinerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExamsForExaminer(examinerId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExamComponent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExamsForExaminer(examinerId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamApi.getExamsForExaminer']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ExamApi - factory interface
 * @export
 */
export const ExamApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExamApiFp(configuration)
    return {
        /**
         * Endpoint for adding tasks to exam. Requires a JSON payload with tasks ids in the request body.
         * @summary Adding tasks to exam
         * @param {number} examId 
         * @param {Array<number>} requestBody JSON payload containing tasks ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTasksToExam(examId: number, requestBody: Array<number>, options?: any): AxiosPromise<ExamComponent> {
            return localVarFp.addTasksToExam(examId, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for creating a new exam. Requires a JSON payload with exam details in the request body.
         * @summary Creating a new exam
         * @param {ExamComponent} examComponent JSON payload containing Exam its tasks(optional) and their tests(optional).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExam(examComponent: ExamComponent, options?: any): AxiosPromise<ExamComponent> {
            return localVarFp.createExam(examComponent, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for exam deleting.
         * @summary Delete an exam
         * @param {number} examId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExam(examId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteExam(examId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for getting all exams with theirs tasks and tests.
         * @summary Get all exams
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExams(options?: any): AxiosPromise<Array<ExamComponent>> {
            return localVarFp.getAllExams(options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for getting exam with theirs tasks and tests by id.
         * @summary Get an exam by id
         * @param {number} examId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExam(examId: number, options?: any): AxiosPromise<ExamComponent> {
            return localVarFp.getExam(examId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for getting exams with theirs tasks and tests by examiner id.
         * @summary Get exams by examiner id
         * @param {number} examinerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExamsForExaminer(examinerId: number, options?: any): AxiosPromise<Array<ExamComponent>> {
            return localVarFp.getExamsForExaminer(examinerId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExamApi - object-oriented interface
 * @export
 * @class ExamApi
 * @extends {BaseAPI}
 */
export class ExamApi extends BaseAPI {
    /**
     * Endpoint for adding tasks to exam. Requires a JSON payload with tasks ids in the request body.
     * @summary Adding tasks to exam
     * @param {number} examId 
     * @param {Array<number>} requestBody JSON payload containing tasks ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamApi
     */
    public addTasksToExam(examId: number, requestBody: Array<number>, options?: RawAxiosRequestConfig) {
        return ExamApiFp(this.configuration).addTasksToExam(examId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for creating a new exam. Requires a JSON payload with exam details in the request body.
     * @summary Creating a new exam
     * @param {ExamComponent} examComponent JSON payload containing Exam its tasks(optional) and their tests(optional).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamApi
     */
    public createExam(examComponent: ExamComponent, options?: RawAxiosRequestConfig) {
        return ExamApiFp(this.configuration).createExam(examComponent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for exam deleting.
     * @summary Delete an exam
     * @param {number} examId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamApi
     */
    public deleteExam(examId: number, options?: RawAxiosRequestConfig) {
        return ExamApiFp(this.configuration).deleteExam(examId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for getting all exams with theirs tasks and tests.
     * @summary Get all exams
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamApi
     */
    public getAllExams(options?: RawAxiosRequestConfig) {
        return ExamApiFp(this.configuration).getAllExams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for getting exam with theirs tasks and tests by id.
     * @summary Get an exam by id
     * @param {number} examId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamApi
     */
    public getExam(examId: number, options?: RawAxiosRequestConfig) {
        return ExamApiFp(this.configuration).getExam(examId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for getting exams with theirs tasks and tests by examiner id.
     * @summary Get exams by examiner id
     * @param {number} examinerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamApi
     */
    public getExamsForExaminer(examinerId: number, options?: RawAxiosRequestConfig) {
        return ExamApiFp(this.configuration).getExamsForExaminer(examinerId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExamSessionApi - axios parameter creator
 * @export
 */
export const ExamSessionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint for creating a new exam session. Requires a JSON payload with exam session details in the request body.
         * @summary Creating a new exam session
         * @param {ExamSessionComponent} examSessionComponent JSON payload containing Test.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExamSession: async (examSessionComponent: ExamSessionComponent, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examSessionComponent' is not null or undefined
            assertParamExists('createExamSession', 'examSessionComponent', examSessionComponent)
            const localVarPath = `/api/exam_session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(examSessionComponent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for exam session deleting.
         * @summary Delete an exam session
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExamSession: async (examSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examSessionId' is not null or undefined
            assertParamExists('deleteExamSession', 'examSessionId', examSessionId)
            const localVarPath = `/api/exam_session/{exam_session_id}`
                .replace(`{${"exam_session_id"}}`, encodeURIComponent(String(examSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for getting all exam sessions with examinee.
         * @summary Get all exam sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExamSessions: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/exam_session`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for getting exam session with examinee by id.
         * @summary Get an exam session by id
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExamSession: async (examSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examSessionId' is not null or undefined
            assertParamExists('getExamSession', 'examSessionId', examSessionId)
            const localVarPath = `/api/exam_session/{exam_session_id}`
                .replace(`{${"exam_session_id"}}`, encodeURIComponent(String(examSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for getting exam sessions by exam id.
         * @summary Get exam sessions by exam id
         * @param {number} examId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExamSessionsByExam: async (examId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examId' is not null or undefined
            assertParamExists('getExamSessionsByExam', 'examId', examId)
            const localVarPath = `/api/exam_session/{exam_id}`
                .replace(`{${"exam_id"}}`, encodeURIComponent(String(examId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExamSessionApi - functional programming interface
 * @export
 */
export const ExamSessionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExamSessionApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint for creating a new exam session. Requires a JSON payload with exam session details in the request body.
         * @summary Creating a new exam session
         * @param {ExamSessionComponent} examSessionComponent JSON payload containing Test.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExamSession(examSessionComponent: ExamSessionComponent, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExamSessionComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExamSession(examSessionComponent, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamSessionApi.createExamSession']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for exam session deleting.
         * @summary Delete an exam session
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExamSession(examSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExamSession(examSessionId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamSessionApi.deleteExamSession']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for getting all exam sessions with examinee.
         * @summary Get all exam sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllExamSessions(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExamSessionComponent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllExamSessions(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamSessionApi.getAllExamSessions']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for getting exam session with examinee by id.
         * @summary Get an exam session by id
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExamSession(examSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExamSessionComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExamSession(examSessionId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamSessionApi.getExamSession']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for getting exam sessions by exam id.
         * @summary Get exam sessions by exam id
         * @param {number} examId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExamSessionsByExam(examId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExamSessionComponent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExamSessionsByExam(examId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ExamSessionApi.getExamSessionsByExam']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ExamSessionApi - factory interface
 * @export
 */
export const ExamSessionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExamSessionApiFp(configuration)
    return {
        /**
         * Endpoint for creating a new exam session. Requires a JSON payload with exam session details in the request body.
         * @summary Creating a new exam session
         * @param {ExamSessionComponent} examSessionComponent JSON payload containing Test.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExamSession(examSessionComponent: ExamSessionComponent, options?: any): AxiosPromise<ExamSessionComponent> {
            return localVarFp.createExamSession(examSessionComponent, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for exam session deleting.
         * @summary Delete an exam session
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExamSession(examSessionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteExamSession(examSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for getting all exam sessions with examinee.
         * @summary Get all exam sessions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllExamSessions(options?: any): AxiosPromise<Array<ExamSessionComponent>> {
            return localVarFp.getAllExamSessions(options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for getting exam session with examinee by id.
         * @summary Get an exam session by id
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExamSession(examSessionId: string, options?: any): AxiosPromise<ExamSessionComponent> {
            return localVarFp.getExamSession(examSessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for getting exam sessions by exam id.
         * @summary Get exam sessions by exam id
         * @param {number} examId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExamSessionsByExam(examId: number, options?: any): AxiosPromise<Array<ExamSessionComponent>> {
            return localVarFp.getExamSessionsByExam(examId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExamSessionApi - object-oriented interface
 * @export
 * @class ExamSessionApi
 * @extends {BaseAPI}
 */
export class ExamSessionApi extends BaseAPI {
    /**
     * Endpoint for creating a new exam session. Requires a JSON payload with exam session details in the request body.
     * @summary Creating a new exam session
     * @param {ExamSessionComponent} examSessionComponent JSON payload containing Test.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamSessionApi
     */
    public createExamSession(examSessionComponent: ExamSessionComponent, options?: RawAxiosRequestConfig) {
        return ExamSessionApiFp(this.configuration).createExamSession(examSessionComponent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for exam session deleting.
     * @summary Delete an exam session
     * @param {string} examSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamSessionApi
     */
    public deleteExamSession(examSessionId: string, options?: RawAxiosRequestConfig) {
        return ExamSessionApiFp(this.configuration).deleteExamSession(examSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for getting all exam sessions with examinee.
     * @summary Get all exam sessions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamSessionApi
     */
    public getAllExamSessions(options?: RawAxiosRequestConfig) {
        return ExamSessionApiFp(this.configuration).getAllExamSessions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for getting exam session with examinee by id.
     * @summary Get an exam session by id
     * @param {string} examSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamSessionApi
     */
    public getExamSession(examSessionId: string, options?: RawAxiosRequestConfig) {
        return ExamSessionApiFp(this.configuration).getExamSession(examSessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for getting exam sessions by exam id.
     * @summary Get exam sessions by exam id
     * @param {number} examId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExamSessionApi
     */
    public getExamSessionsByExam(examId: number, options?: RawAxiosRequestConfig) {
        return ExamSessionApiFp(this.configuration).getExamSessionsByExam(examId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SubmissionApi - axios parameter creator
 * @export
 */
export const SubmissionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint for getting submission by id.
         * @summary Get submission by id
         * @param {number} submissionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmission: async (submissionId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'submissionId' is not null or undefined
            assertParamExists('getSubmission', 'submissionId', submissionId)
            const localVarPath = `/api/submission/{submission_id}`
                .replace(`{${"submission_id"}}`, encodeURIComponent(String(submissionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for getting submissions by exam sessions id.
         * @summary Get submissions by exam session id
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmissionsByExamSessionId: async (examSessionId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examSessionId' is not null or undefined
            assertParamExists('getSubmissionsByExamSessionId', 'examSessionId', examSessionId)
            const localVarPath = `/api/submission/by_exam_session_id/{exam_session_id}`
                .replace(`{${"exam_session_id"}}`, encodeURIComponent(String(examSessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubmissionApi - functional programming interface
 * @export
 */
export const SubmissionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubmissionApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint for getting submission by id.
         * @summary Get submission by id
         * @param {number} submissionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubmission(submissionId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmissionComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubmission(submissionId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SubmissionApi.getSubmission']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for getting submissions by exam sessions id.
         * @summary Get submissions by exam session id
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubmissionsByExamSessionId(examSessionId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SubmissionComponent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubmissionsByExamSessionId(examSessionId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['SubmissionApi.getSubmissionsByExamSessionId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * SubmissionApi - factory interface
 * @export
 */
export const SubmissionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubmissionApiFp(configuration)
    return {
        /**
         * Endpoint for getting submission by id.
         * @summary Get submission by id
         * @param {number} submissionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmission(submissionId: number, options?: any): AxiosPromise<SubmissionComponent> {
            return localVarFp.getSubmission(submissionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for getting submissions by exam sessions id.
         * @summary Get submissions by exam session id
         * @param {string} examSessionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubmissionsByExamSessionId(examSessionId: string, options?: any): AxiosPromise<Array<SubmissionComponent>> {
            return localVarFp.getSubmissionsByExamSessionId(examSessionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubmissionApi - object-oriented interface
 * @export
 * @class SubmissionApi
 * @extends {BaseAPI}
 */
export class SubmissionApi extends BaseAPI {
    /**
     * Endpoint for getting submission by id.
     * @summary Get submission by id
     * @param {number} submissionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionApi
     */
    public getSubmission(submissionId: number, options?: RawAxiosRequestConfig) {
        return SubmissionApiFp(this.configuration).getSubmission(submissionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for getting submissions by exam sessions id.
     * @summary Get submissions by exam session id
     * @param {string} examSessionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmissionApi
     */
    public getSubmissionsByExamSessionId(examSessionId: string, options?: RawAxiosRequestConfig) {
        return SubmissionApiFp(this.configuration).getSubmissionsByExamSessionId(examSessionId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint for creating a new task. Requires a JSON payload with task details in the request body.
         * @summary Creating a new task
         * @param {TaskComponent} taskComponent JSON payload containing Task with its tests(optional).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask: async (taskComponent: TaskComponent, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskComponent' is not null or undefined
            assertParamExists('createTask', 'taskComponent', taskComponent)
            const localVarPath = `/api/task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskComponent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for task deleting.
         * @summary Delete a task
         * @param {number} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask: async (taskId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteTask', 'taskId', taskId)
            const localVarPath = `/api/task/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for getting all tasks with theirs tests.
         * @summary Get all tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTasks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for getting task with its tests by id.
         * @summary Get a task by id
         * @param {number} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTask: async (taskId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getTask', 'taskId', taskId)
            const localVarPath = `/api/task/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for getting tasks with theirs tests by exam id.
         * @summary Get tasks by exam id
         * @param {number} examId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasksForExam: async (examId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'examId' is not null or undefined
            assertParamExists('getTasksForExam', 'examId', examId)
            const localVarPath = `/api/task/exam/{exam_id}`
                .replace(`{${"exam_id"}}`, encodeURIComponent(String(examId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint for creating a new task. Requires a JSON payload with task details in the request body.
         * @summary Creating a new task
         * @param {TaskComponent} taskComponent JSON payload containing Task with its tests(optional).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTask(taskComponent: TaskComponent, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTask(taskComponent, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskApi.createTask']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for task deleting.
         * @summary Delete a task
         * @param {number} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTask(taskId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTask(taskId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskApi.deleteTask']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for getting all tasks with theirs tests.
         * @summary Get all tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTasks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskComponent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTasks(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskApi.getAllTasks']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for getting task with its tests by id.
         * @summary Get a task by id
         * @param {number} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTask(taskId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTask(taskId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskApi.getTask']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for getting tasks with theirs tests by exam id.
         * @summary Get tasks by exam id
         * @param {number} examId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTasksForExam(examId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskComponent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTasksForExam(examId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TaskApi.getTasksForExam']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskApiFp(configuration)
    return {
        /**
         * Endpoint for creating a new task. Requires a JSON payload with task details in the request body.
         * @summary Creating a new task
         * @param {TaskComponent} taskComponent JSON payload containing Task with its tests(optional).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTask(taskComponent: TaskComponent, options?: any): AxiosPromise<TaskComponent> {
            return localVarFp.createTask(taskComponent, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for task deleting.
         * @summary Delete a task
         * @param {number} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask(taskId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTask(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for getting all tasks with theirs tests.
         * @summary Get all tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTasks(options?: any): AxiosPromise<Array<TaskComponent>> {
            return localVarFp.getAllTasks(options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for getting task with its tests by id.
         * @summary Get a task by id
         * @param {number} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTask(taskId: number, options?: any): AxiosPromise<TaskComponent> {
            return localVarFp.getTask(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for getting tasks with theirs tests by exam id.
         * @summary Get tasks by exam id
         * @param {number} examId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasksForExam(examId: number, options?: any): AxiosPromise<Array<TaskComponent>> {
            return localVarFp.getTasksForExam(examId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI {
    /**
     * Endpoint for creating a new task. Requires a JSON payload with task details in the request body.
     * @summary Creating a new task
     * @param {TaskComponent} taskComponent JSON payload containing Task with its tests(optional).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public createTask(taskComponent: TaskComponent, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).createTask(taskComponent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for task deleting.
     * @summary Delete a task
     * @param {number} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public deleteTask(taskId: number, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).deleteTask(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for getting all tasks with theirs tests.
     * @summary Get all tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public getAllTasks(options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).getAllTasks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for getting task with its tests by id.
     * @summary Get a task by id
     * @param {number} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public getTask(taskId: number, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).getTask(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for getting tasks with theirs tests by exam id.
     * @summary Get tasks by exam id
     * @param {number} examId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public getTasksForExam(examId: number, options?: RawAxiosRequestConfig) {
        return TaskApiFp(this.configuration).getTasksForExam(examId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestApi - axios parameter creator
 * @export
 */
export const TestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint for creating a new test. Requires a JSON payload with test details in the request body.
         * @summary Creating a new test
         * @param {TestComponent} testComponent JSON payload containing Test.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTest: async (testComponent: TestComponent, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testComponent' is not null or undefined
            assertParamExists('createTest', 'testComponent', testComponent)
            const localVarPath = `/api/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testComponent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for test deleting.
         * @summary Delete a test
         * @param {number} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTest: async (testId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('deleteTest', 'testId', testId)
            const localVarPath = `/api/test/{test_id}`
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for getting all tests.
         * @summary Get all tests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTests: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for getting test by id.
         * @summary Get an test by id
         * @param {number} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTest: async (testId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('getTest', 'testId', testId)
            const localVarPath = `/api/test/{test_id}`
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint for getting tests with by task id.
         * @summary Get tests by task id
         * @param {number} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsForTask: async (testId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testId' is not null or undefined
            assertParamExists('getTestsForTask', 'testId', testId)
            const localVarPath = `/api/test/task/{test_id}`
                .replace(`{${"test_id"}}`, encodeURIComponent(String(testId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestApi - functional programming interface
 * @export
 */
export const TestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint for creating a new test. Requires a JSON payload with test details in the request body.
         * @summary Creating a new test
         * @param {TestComponent} testComponent JSON payload containing Test.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTest(testComponent: TestComponent, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTest(testComponent, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TestApi.createTest']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for test deleting.
         * @summary Delete a test
         * @param {number} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTest(testId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTest(testId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TestApi.deleteTest']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for getting all tests.
         * @summary Get all tests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTests(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TestComponent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTests(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TestApi.getAllTests']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for getting test by id.
         * @summary Get an test by id
         * @param {number} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTest(testId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestComponent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTest(testId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TestApi.getTest']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Endpoint for getting tests with by task id.
         * @summary Get tests by task id
         * @param {number} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestsForTask(testId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TestComponent>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestsForTask(testId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TestApi.getTestsForTask']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TestApi - factory interface
 * @export
 */
export const TestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestApiFp(configuration)
    return {
        /**
         * Endpoint for creating a new test. Requires a JSON payload with test details in the request body.
         * @summary Creating a new test
         * @param {TestComponent} testComponent JSON payload containing Test.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTest(testComponent: TestComponent, options?: any): AxiosPromise<TestComponent> {
            return localVarFp.createTest(testComponent, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for test deleting.
         * @summary Delete a test
         * @param {number} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTest(testId: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTest(testId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for getting all tests.
         * @summary Get all tests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTests(options?: any): AxiosPromise<Array<TestComponent>> {
            return localVarFp.getAllTests(options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for getting test by id.
         * @summary Get an test by id
         * @param {number} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTest(testId: number, options?: any): AxiosPromise<TestComponent> {
            return localVarFp.getTest(testId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint for getting tests with by task id.
         * @summary Get tests by task id
         * @param {number} testId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestsForTask(testId: number, options?: any): AxiosPromise<Array<TestComponent>> {
            return localVarFp.getTestsForTask(testId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestApi - object-oriented interface
 * @export
 * @class TestApi
 * @extends {BaseAPI}
 */
export class TestApi extends BaseAPI {
    /**
     * Endpoint for creating a new test. Requires a JSON payload with test details in the request body.
     * @summary Creating a new test
     * @param {TestComponent} testComponent JSON payload containing Test.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public createTest(testComponent: TestComponent, options?: RawAxiosRequestConfig) {
        return TestApiFp(this.configuration).createTest(testComponent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for test deleting.
     * @summary Delete a test
     * @param {number} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public deleteTest(testId: number, options?: RawAxiosRequestConfig) {
        return TestApiFp(this.configuration).deleteTest(testId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for getting all tests.
     * @summary Get all tests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public getAllTests(options?: RawAxiosRequestConfig) {
        return TestApiFp(this.configuration).getAllTests(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for getting test by id.
     * @summary Get an test by id
     * @param {number} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public getTest(testId: number, options?: RawAxiosRequestConfig) {
        return TestApiFp(this.configuration).getTest(testId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint for getting tests with by task id.
     * @summary Get tests by task id
     * @param {number} testId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestApi
     */
    public getTestsForTask(testId: number, options?: RawAxiosRequestConfig) {
        return TestApiFp(this.configuration).getTestsForTask(testId, options).then((request) => request(this.axios, this.basePath));
    }
}



